// =================================================================================
// This is auto-generated by GoFrame CLI tool only once. Fill this file as you wish.
// =================================================================================

package dao

import (
	"context"
	"letga/internal/consts"
	"letga/internal/dao/internal"
	"letga/internal/model"
	"letga/internal/model/do"

	"github.com/gogf/gf/v2/container/gvar"
	"github.com/gogf/gf/v2/database/gdb"
)

// internalAuthRoleDao is internal type for wrapping internal DAO implements.
type internalAuthRoleDao = *internal.AuthRoleDao

// authRoleDao is the data access object for table auth_role.
// You can define custom methods on it to extend its functionality as you wish.
type authRoleDao struct {
	internalAuthRoleDao
}

var (
	// AuthRole is globally public accessible object for table auth_role operations.
	AuthRole = authRoleDao{
		internal.NewAuthRoleDao(),
	}
)

// Fill with you ideas below.

// 使用ID获取角色
func (d authRoleDao) Get(ctx context.Context, keyId uint) (*model.AuthRole, error) {
	var (
		domian *model.AuthRole
		err    error
	)
	// 扫描数据
	if err = d.Ctx(ctx).Where(do.AuthRole{
		Id: keyId,
	}).Hook(HashSelectHook(ctx)).Scan(&domian); err != nil {
		return nil, err
	}
	return domian, nil
}

// 使用账号名称获取角色
func (d authRoleDao) GetByName(ctx context.Context, name string) (*model.AuthRole, error) {
	var (
		role *model.AuthRole
		err  error
	)
	// 扫描数据
	if err = d.Ctx(ctx).Where(do.AuthRole{
		Name: name,
	}).Hook(HashSelectHook(ctx)).Scan(&role); err != nil {
		return nil, err
	}
	return role, nil
}

// 获取所有角色
func (d authRoleDao) GetAll(ctx context.Context) ([]*model.AuthRole, error) {
	var (
		roles []*model.AuthRole
		err   error
	)
	// 扫描数据
	if err = d.Ctx(ctx).Hook(HashSelectHook(ctx)).Scan(&roles); err != nil {
		return nil, err
	}
	return roles, nil
}

// 使用IDs获取角色
func (d authRoleDao) GetByIds(ctx context.Context, ids []uint) ([]*model.AuthRole, error) {
	var (
		domians []*model.AuthRole
		err     error
	)
	// 扫描数据
	if err = d.Ctx(ctx).WhereIn(d.Columns().Id, ids).Hook(HashSelectHook(ctx)).Scan(&domians); err != nil {
		return nil, err
	}
	return domians, nil
}

// 使用名称搜索角色
func (d authRoleDao) SearchIdsByTitle(ctx context.Context, title string) ([]uint, error) {
	var (
		keyIds []uint
		vars   []*gvar.Var
		err    error
	)
	// 扫描数据
	vars, err = d.Ctx(ctx).WhereLike(d.Columns().Title, "%"+title+"%").Fields(d.Columns().Id).Array()
	if err != nil {
		return nil, err
	}
	for _, v := range vars {
		keyIds = append(keyIds, v.Uint())
	}
	return keyIds, nil
}

// 写入角色
func (d authRoleDao) Insert(ctx context.Context, data *do.AuthRole) (*model.AuthRole, error) {
	insertId, err := d.Ctx(ctx).Data(data).InsertAndGetId()
	if err != nil {
		return nil, err
	}
	return d.Get(ctx, uint(insertId))
}

// 更新角色
func (d authRoleDao) Update(ctx context.Context, data *do.AuthRole) (*model.AuthRole, error) {
	_, err := d.Ctx(ctx).Where(d.Columns().Id, data.Id).Data(data).Update()
	if err != nil {
		return nil, err
	}
	return d.Get(ctx, data.Id.(uint))
}

// 设置角色状态
func (d authRoleDao) SetStatus(ctx context.Context, keyId uint, value string) (*model.AuthRole, error) {
	_, err := d.Ctx(ctx).Where(d.Columns().Id, keyId).Data(&do.AuthRole{Status: value}).Update()
	if err != nil {
		return nil, err
	}
	return d.Get(ctx, keyId)
}

// 删除角色
func (d authRoleDao) Delete(ctx context.Context, keyIds []uint) error {
	return d.Transaction(ctx, func(ctx context.Context, tx gdb.TX) error {
		// 删除角色
		_, err := d.Ctx(ctx).WhereIn(d.Columns().Id, keyIds).Delete()
		if err != nil {
			return err
		}
		// 删除关联授权路由
		return AuthRoleAccess.DeleteByRoleIds(ctx, keyIds)
	})
	// _, err := d.Ctx(ctx).WhereIn(d.Columns().Id, keyIds).Delete()
	// return err
}

// 检测ID集
func (d authRoleDao) CheckIds(ctx context.Context, keyIds []uint) error {
	return CheckIds(ctx, d.Table(), keyIds, consts.TABLE_AUTH_ROLE_SALT)
}

// 检测Name(含软删除)
func (d authRoleDao) IsNameAvailable(ctx context.Context, name string, notIds ...uint) (bool, error) {
	var (
		m     = d.Ctx(ctx)
		count int
		err   error
	)
	// 过滤统计
	for _, v := range notIds {
		m = m.WhereNot(d.Columns().Id, v)
	}
	if count, err = m.Where(d.Columns().Name, name).Unscoped().Count(); err != nil {
		return false, err
	}
	return count == 0, nil
}
