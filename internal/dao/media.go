// =================================================================================
// This is auto-generated by GoFrame CLI tool only once. Fill this file as you wish.
// =================================================================================

package dao

import (
	"context"
	"letga/internal/consts"
	"letga/internal/dao/internal"
	"letga/internal/model"
	"letga/internal/model/do"

	"github.com/gogf/gf/v2/database/gdb"
)

// internalMediaDao is internal type for wrapping internal DAO implements.
type internalMediaDao = *internal.MediaDao

// mediaDao is the data access object for table media.
// You can define custom methods on it to extend its functionality as you wish.
type mediaDao struct {
	internalMediaDao
}

var (
	// Media is globally public accessible object for table media operations.
	Media = mediaDao{
		internal.NewMediaDao(),
	}
)

// Fill with you ideas below.

// 获取媒体
func (d mediaDao) Get(ctx context.Context, keyId uint) (*model.Media, error) {
	var (
		media *model.Media
		err   error
	)
	// 扫描数据
	if err = d.Ctx(ctx).Where(do.Media{
		Id: keyId,
	}).Hook(HashSelectHook(ctx)).Scan(&media); err != nil {
		return nil, err
	}
	return media, nil
}

// 使用Path获取媒体
func (d mediaDao) GetByPath(ctx context.Context, path string) (*model.Media, error) {
	var (
		media *model.Media
		err   error
	)
	// 扫描数据
	if err = d.Ctx(ctx).Where(do.Media{
		Path: path,
	}).Hook(HashSelectHook(ctx)).Scan(&media); err != nil {
		return nil, err
	}
	return media, nil
}

// 使用Hash获取媒体
func (d mediaDao) GetByHash(ctx context.Context, userId uint, hash string) (*model.Media, error) {
	var (
		media *model.Media
		err   error
	)
	// 扫描数据
	if err = d.Ctx(ctx).Where(do.Media{
		UserId: userId,
		Hash:   hash,
	}).Hook(HashSelectHook(ctx)).Scan(&media); err != nil {
		return nil, err
	}
	return media, nil
}

// 写入媒体
func (d mediaDao) Insert(ctx context.Context, data *do.Media) (*model.Media, error) {
	insertId, err := d.Ctx(ctx).Data(data).InsertAndGetId()
	if err != nil {
		return nil, err
	}
	return d.Get(ctx, uint(insertId))
}

// 更新媒体
func (d mediaDao) Update(ctx context.Context, data *do.Media) (*model.Media, error) {
	var (
		err error
	)
	if err = d.Transaction(ctx, func(ctx context.Context, tx gdb.TX) error {
		_, err = d.Ctx(ctx).Where(d.Columns().Id, data.Id).Data(data).Update()
		return err
	}); err != nil {
		return nil, err
	}
	return d.Get(ctx, data.Id.(uint))
}

// 设置用户状态
func (d mediaDao) SetStatus(ctx context.Context, keyId uint, value string) (*model.Media, error) {
	_, err := d.Ctx(ctx).Where(d.Columns().Id, keyId).Data(&do.Media{Status: value}).Update()
	if err != nil {
		return nil, err
	}
	return d.Get(ctx, keyId)
}

// 删除媒体
func (d mediaDao) Delete(ctx context.Context, keyIds []uint) error {
	_, err := d.Ctx(ctx).WhereIn(d.Columns().Id, keyIds).Delete()
	return err
}

// 分页数据
func (d mediaDao) PageData(ctx context.Context, p *model.PageParams, s *model.MediaSearch, handlers ...gdb.ModelHandler) ([]*model.Media, int, error) {
	var (
		count int
		data  []*model.Media
		err   error
	)
	handlers = append(handlers, SearchHandler(d.Table(), s, p.Search), PageHandler(p.PageSize, p.Current))
	err = d.Ctx(ctx).Handler(handlers...).Hook(HashSelectHook(ctx, d.Table())).WithAll().ScanAndCount(&data, &count, false)
	if err != nil {
		return nil, count, err
	}
	return data, count, nil
}

// 检测ID集
func (d mediaDao) CheckIds(ctx context.Context, keyIds []uint) error {
	return CheckIds(ctx, d.Table(), keyIds, consts.TABLE_MEDIA_SALT)
}
