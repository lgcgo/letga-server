// =================================================================================
// This is auto-generated by GoFrame CLI tool only once. Fill this file as you wish.
// =================================================================================

package dao

import (
	"context"
	"letga/internal/consts"
	"letga/internal/dao/internal"
	"letga/internal/model"
	"letga/internal/model/do"

	"github.com/gogf/gf/v2/container/gvar"
	"github.com/gogf/gf/v2/database/gdb"
)

// internalUserDao is internal type for wrapping internal DAO implements.
type internalUserDao = *internal.UserDao

// userDao is the data access object for table user.
// You can define custom methods on it to extend its functionality as you wish.
type userDao struct {
	internalUserDao
}

var (
	// User is globally public accessible object for table user operations.
	User = userDao{
		internal.NewUserDao(),
	}
)

// Fill with you ideas below.

// 获取用户
func (d userDao) Get(ctx context.Context, keyId uint) (*model.User, error) {
	var (
		data *model.User
		err  error
	)
	// 扫描数据
	if err = d.Ctx(ctx).Where(do.User{
		Id: keyId,
	}).Hook(HashSelectHook(ctx)).Scan(&data); err != nil {
		return nil, err
	}
	return data, nil
}

// 使用唯一ID获取用户
func (d userDao) GetByUuid(ctx context.Context, uuid string) (*model.User, error) {
	var (
		data *model.User
		err  error
	)
	// 扫描数据
	if err = d.Ctx(ctx).Where(do.User{
		Uuid: uuid,
	}).Hook(HashSelectHook(ctx)).Scan(&data); err != nil {
		return nil, err
	}
	return data, nil
}

// 使用手机号获取用户
func (d userDao) GetByMobile(ctx context.Context, mobile string) (*model.User, error) {
	var (
		data *model.User
		err  error
	)
	// 扫描数据
	if err = d.Ctx(ctx).Where(do.User{
		Mobile: mobile,
	}).Hook(HashSelectHook(ctx)).Scan(&data); err != nil {
		return nil, err
	}
	return data, nil
}

// 使用邮箱获取用户
func (d userDao) GetByEmail(ctx context.Context, email string) (*model.User, error) {
	var (
		data *model.User
		err  error
	)
	// 扫描数据
	if err = d.Ctx(ctx).Where(do.User{
		Email: email,
	}).Hook(HashSelectHook(ctx)).Scan(&data); err != nil {
		return nil, err
	}
	return data, nil
}

// 使用账号获取用户
func (d userDao) GetByAccount(ctx context.Context, account string) (*model.User, error) {
	var (
		data *model.User
		err  error
	)
	// 扫描数据
	if err = d.Ctx(ctx).Where(do.User{
		Account: account,
	}).Hook(HashSelectHook(ctx)).Scan(&data); err != nil {
		return nil, err
	}
	return data, nil
}

// 使用昵称搜索用户
func (d userDao) SearchIdsByNickName(ctx context.Context, nickName string) ([]uint, error) {
	var (
		keyIds []uint
		vars   []*gvar.Var
		err    error
	)
	// 扫描数据
	vars, err = d.Ctx(ctx).WhereLike(d.Columns().Nickname, "%"+nickName+"%").Fields(d.Columns().Id).Array()
	if err != nil {
		return nil, err
	}
	for _, v := range vars {
		keyIds = append(keyIds, v.Uint())
	}
	return keyIds, nil
}

// 写入用户
func (d userDao) Insert(ctx context.Context, data *do.User) (*model.User, error) {
	insertId, err := d.Ctx(ctx).Data(data).InsertAndGetId()
	if err != nil {
		return nil, err
	}
	return d.Get(ctx, uint(insertId))
}

// 更新用户
func (d userDao) Update(ctx context.Context, data *do.User) (*model.User, error) {
	_, err := d.Ctx(ctx).Where(d.Columns().Id, data.Id).Data(data).Update()
	if err != nil {
		return nil, err
	}
	return d.Get(ctx, data.Id.(uint))
}

// 设置用户状态
func (d userDao) SetStatus(ctx context.Context, keyId uint, value string) (*model.User, error) {
	_, err := d.Ctx(ctx).Where(d.Columns().Id, keyId).Data(&do.User{Status: value}).Update()
	if err != nil {
		return nil, err
	}
	return d.Get(ctx, keyId)
}

// 删除用户
func (d userDao) Delete(ctx context.Context, keyIds []uint) error {
	// 删除用户
	_, err := d.Ctx(ctx).WhereIn(d.Columns().Id, keyIds).Delete()
	return err
	// return d.Transaction(ctx, func(ctx context.Context, tx gdb.TX) error {
	// 	// 删除用户
	// 	_, err := d.Ctx(ctx).WhereIn(d.Columns().Id, keyIds).Delete()
	// 	if err != nil {
	// 		return err
	// 	}
	// 	// 删除关联授权权限
	// 	return UserAccess.DeleteByUserIds(ctx, keyIds)
	// })
}

// 分页数据
func (d userDao) PageData(ctx context.Context, p *model.PageParams, s *model.UserSearch, handlers ...gdb.ModelHandler) ([]*model.User, int, error) {
	var (
		count int
		data  []*model.User
		err   error
	)
	handlers = append(handlers, SearchHandler(d.Table(), s, p.Search), PageHandler(p.PageSize, p.Current))
	err = d.Ctx(ctx).Handler(handlers...).Hook(HashSelectHook(ctx, d.Table())).WithAll().ScanAndCount(&data, &count, false)
	if err != nil {
		return nil, count, err
	}
	return data, count, nil
}

// 检测ID集
func (d userDao) CheckIds(ctx context.Context, keyIds []uint) error {
	return CheckIds(ctx, d.Table(), keyIds, consts.TABLE_USER_SALT)
}

// 追加登录错误次数
func (d userDao) IncrementSigninFailure(ctx context.Context, userId uint) error {
	_, err := d.Ctx(ctx).Where(do.User{
		Id: userId,
	}).Increment(d.Columns().SigninFailure, 1)
	return err
}

// 检测账号(含软删除)
func (d userDao) IsAccountAvailable(ctx context.Context, account string, notIds ...uint) (bool, error) {
	var (
		m     = d.Ctx(ctx)
		count int
		err   error
	)
	// 过滤统计
	for _, v := range notIds {
		m = m.WhereNot(d.Columns().Id, v)
	}
	if count, err = m.Where(d.Columns().Account, account).Unscoped().Count(); err != nil {
		return false, err
	}
	return count == 0, nil
}

// 检测手机号(含软删除)
func (d userDao) IsMobileAvailable(ctx context.Context, mobile string, notIds ...uint) (bool, error) {
	var (
		m     = d.Ctx(ctx)
		count int
		err   error
	)
	for _, v := range notIds {
		m = m.WhereNot(d.Columns().Id, v)
	}
	if count, err = m.Where(d.Columns().Mobile, mobile).Unscoped().Count(); err != nil {
		return false, err
	}
	return count == 0, nil
}

// 检测Email(含软删除)
func (d userDao) IsEmailAvailable(ctx context.Context, email string, notIds ...uint) (bool, error) {
	var (
		m     = d.Ctx(ctx)
		count int
		err   error
	)
	for _, v := range notIds {
		m = m.WhereNot(d.Columns().Id, v)
	}
	if count, err = m.Where(d.Columns().Email, email).Unscoped().Count(); err != nil {
		return false, err
	}
	return count == 0, nil
}
