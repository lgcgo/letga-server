// =================================================================================
// This is auto-generated by GoFrame CLI tool only once. Fill this file as you wish.
// =================================================================================

package dao

import (
	"context"
	"letga/internal/consts"
	"letga/internal/dao/internal"
	"letga/internal/model"
	"letga/internal/model/do"
)

// internalMenuDao is internal type for wrapping internal DAO implements.
type internalMenuDao = *internal.MenuDao

// menuDao is the data access object for table menu.
// You can define custom methods on it to extend its functionality as you wish.
type menuDao struct {
	internalMenuDao
}

var (
	// Menu is globally public accessible object for table menu operations.
	Menu = menuDao{
		internal.NewMenuDao(),
	}
)

// Fill with you ideas below.

// 获取菜单
func (d menuDao) Get(ctx context.Context, keyId uint) (*model.Menu, error) {
	var (
		menu *model.Menu
		err  error
	)
	// 扫描数据
	if err = d.Ctx(ctx).Where(do.Menu{
		Id: keyId,
	}).Hook(HashSelectHook(ctx)).Scan(&menu); err != nil {
		return nil, err
	}
	return menu, nil
}

// 获取所有菜单
func (d menuDao) GetAll(ctx context.Context) ([]*model.Menu, error) {
	var (
		menus []*model.Menu
		err   error
	)
	// 扫描数据
	if err = d.Ctx(ctx).Hook(HashSelectHook(ctx)).Scan(&menus); err != nil {
		return nil, err
	}
	return menus, nil
}

// 写入菜单
func (d menuDao) Insert(ctx context.Context, data *do.Menu) (*model.Menu, error) {
	insertId, err := d.Ctx(ctx).Data(data).InsertAndGetId()
	if err != nil {
		return nil, err
	}
	return d.Get(ctx, uint(insertId))
}

// 更新菜单
func (d menuDao) Update(ctx context.Context, data *do.Menu) (*model.Menu, error) {
	_, err := d.Ctx(ctx).Where(d.Columns().Id, data.Id).Data(data).Update()
	if err != nil {
		return nil, err
	}
	return d.Get(ctx, data.Id.(uint))
}

// 设置菜单状态
func (d menuDao) SetStatus(ctx context.Context, keyId uint, value string) (*model.Menu, error) {
	_, err := d.Ctx(ctx).Where(d.Columns().Id, keyId).Data(&do.Menu{Status: value}).Update()
	if err != nil {
		return nil, err
	}
	return d.Get(ctx, keyId)
}

// 删除菜单
func (d menuDao) Delete(ctx context.Context, keyIds []uint) error {
	_, err := d.Ctx(ctx).WhereIn(d.Columns().Id, keyIds).Delete()
	return err
}

// 检测ID集
func (d menuDao) CheckIds(ctx context.Context, keyIds []uint) error {
	return CheckIds(ctx, d.Table(), keyIds, consts.TABLE_MENU_SALT)
}

// 检测Title(含软删除)
func (d menuDao) IsTitleAvailable(ctx context.Context, title string, notIds ...uint) (bool, error) {
	var (
		m     = d.Ctx(ctx)
		count int
		err   error
	)
	for _, v := range notIds {
		m = m.WhereNot(d.Columns().Id, v)
	}
	if count, err = m.Where(d.Columns().Title, title).Unscoped().Count(); err != nil {
		return false, err
	}
	return count == 0, nil
}
