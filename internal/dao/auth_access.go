// =================================================================================
// This is auto-generated by GoFrame CLI tool only once. Fill this file as you wish.
// =================================================================================

package dao

import (
	"context"
	"letga/internal/consts"
	"letga/internal/dao/internal"
	"letga/internal/model"
	"letga/internal/model/do"

	"github.com/gogf/gf/v2/database/gdb"
)

// internalAuthAccessDao is internal type for wrapping internal DAO implements.
type internalAuthAccessDao = *internal.AuthAccessDao

// authAccessDao is the data access object for table auth_access.
// You can define custom methods on it to extend its functionality as you wish.
type authAccessDao struct {
	internalAuthAccessDao
}

var (
	// AuthAccess is globally public accessible object for table auth_access operations.
	AuthAccess = authAccessDao{
		internal.NewAuthAccessDao(),
	}
)

// Fill with you ideas below.

// 获取用户授权
func (d authAccessDao) Get(ctx context.Context, keyId uint) (*model.AuthAccess, error) {
	var (
		data *model.AuthAccess
		err  error
	)
	// 扫描数据
	if err = d.Ctx(ctx).Where(do.AuthAccess{
		Id: keyId,
	}).Hook(HashSelectHook(ctx)).WithAll().Scan(&data); err != nil {
		return nil, err
	}
	return data, nil
}

// 使用用户ID获取授权集
func (d authAccessDao) GetByUserId(ctx context.Context, userId uint) ([]*model.AuthAccess, error) {
	var (
		data []*model.AuthAccess
		err  error
	)
	// 扫描数据
	if err = d.Ctx(ctx).Where(do.AuthAccess{
		UserId: userId,
	}).Hook(HashSelectHook(ctx)).WithAll().Scan(&data); err != nil {
		return nil, err
	}
	return data, nil
}

// 使用用户ID与角色ID获取授权集
func (d authAccessDao) GetByUserIdAndRoleId(ctx context.Context, userId uint, roleId uint) ([]*model.AuthAccess, error) {
	var (
		data []*model.AuthAccess
		err  error
	)
	// 扫描数据
	if err = d.Ctx(ctx).Where(do.AuthAccess{
		UserId: userId,
		RoleId: roleId,
	}).Hook(HashSelectHook(ctx)).WithAll().Scan(&data); err != nil {
		return nil, err
	}
	return data, nil
}

// 写入用户授权
func (d authAccessDao) Insert(ctx context.Context, data *do.AuthAccess) (*model.AuthAccess, error) {
	insertId, err := d.Ctx(ctx).Data(data).InsertAndGetId()
	if err != nil {
		return nil, err
	}
	return d.Get(ctx, uint(insertId))
}

// 批量写入用户授权
func (d authAccessDao) BatchInsert(ctx context.Context, data []*do.AuthAccess) error {
	_, err := d.Ctx(ctx).Data(data).Insert()
	if err != nil {
		return err
	}
	return nil
}

// 设置用户授权状态
func (d authAccessDao) SetStatus(ctx context.Context, keyId uint, value string) (*model.AuthAccess, error) {
	_, err := d.Ctx(ctx).Where(d.Columns().Id, keyId).Data(&do.AuthAccess{Status: value}).Update()
	if err != nil {
		return nil, err
	}
	return d.Get(ctx, keyId)
}

// 删除用户授权
func (d authAccessDao) Delete(ctx context.Context, keyIds []uint) error {
	_, err := d.Ctx(ctx).WhereIn(d.Columns().Id, keyIds).Delete()
	return err
}

// 删除用户指定角色授权
func (d authAccessDao) DeleteByUserIdAndRoleIds(ctx context.Context, userId uint, roleIds []uint) error {
	_, err := d.Ctx(ctx).WhereIn(d.Columns().UserId, userId).WhereIn(d.Columns().RoleId, roleIds).Delete()
	return err
}

// 使用用户ID删除用户授权
func (d authAccessDao) DeleteByUserIds(ctx context.Context, userIds []uint) error {
	return d.Transaction(ctx, func(ctx context.Context, tx gdb.TX) error {
		_, err := d.Ctx(ctx).WhereIn(d.Columns().UserId, userIds).Delete()
		return err
	})
}

// 使用角色ID删除用户授权
func (d authAccessDao) DeleteByRoleIds(ctx context.Context, roleIds []uint) error {
	_, err := d.Ctx(ctx).WhereIn(d.Columns().RoleId, roleIds).Delete()
	return err
}

// 分页数据
func (d authAccessDao) PageData(ctx context.Context, p *model.PageParams, s *model.AuthAccessSearch, handlers ...gdb.ModelHandler) ([]*model.AuthAccess, int, error) {
	var (
		count int
		data  []*model.AuthAccess
		err   error
	)
	handlers = append(handlers, SearchHandler(d.Table(), s, p.Search), PageHandler(p.PageSize, p.Current))
	err = d.Ctx(ctx).Handler(handlers...).Hook(HashSelectHook(ctx, d.Table())).WithAll().ScanAndCount(&data, &count, false)
	if err != nil {
		return nil, count, err
	}
	return data, count, nil
}

// 检测ID集
func (d authAccessDao) CheckIds(ctx context.Context, keyIds []uint) error {
	return CheckIds(ctx, d.Table(), keyIds, consts.TABLE_AUTH_ACCESS_SALT)
}

// 检测数据是否已经存在
func (d authAccessDao) IsExist(ctx context.Context, data *do.AuthAccess) (bool, error) {
	count, err := d.Ctx(ctx).Where(do.AuthAccess{
		UserId: data.UserId,
		RoleId: data.RoleId,
	}).Count()
	if err != nil {
		return false, err
	}
	return count > 0, nil
}
